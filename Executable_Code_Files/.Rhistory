data<- read.csv("movie_metadata.csv")
data$`Number of User Reviews` <- data$num_user_for_reviews
data <- select(data, -num_user_for_reviews)
data$movie_title %<>% stringr::str_replace("?", replacement="")
Score_Dur <- ggplot(data, aes(x=duration, y=imdb_score,
text=paste("Movie Title: ", test$movie_title, "<br>Duration in Hours and Minutes: ",
duration %>%
minutes() %>%
period_to_seconds() %>%
seconds_to_period() %>%
as.character() %>%
stringr::str_replace(" 0S", replacement = ""),
sep=""))) +
geom_point(size=1, aes(colour=`Number of User Reviews`)) +
scale_colour_gradientn(colours = rev(rainbow(6))) +
theme(plot.title = element_text(face = "bold")) +
labs(title = "Duration Vs. IMDB Score (and Number of User Reviews)",
x = "Duration", y = "IMDB Score")
ggplotly(Score_Dur, hoverinfo="text")
install.packages("tidyr")
install.packages("splitstackshape")
install.packages("corrr")
install.packages("corrplot")
install.packages("ggthemes")
install.packages("DT")
install.packages("magrittr")
install.packages("lubridate")
library(dplyr)
library(magrittr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(reshape2)
library(splitstackshape)
library(stringr)
library(corrplot)
library(corrr)
library(ggthemes)
#################################################################
setwd("C:/Program Files/RStudio/bin")
data<- read.csv("movie_metadata.csv")
#DURATION VS IMDB SCORE (NUMBER OF USER REVIEWS)
data$`Number of User Reviews` <- data$num_user_for_reviews
data <- select(data, -num_user_for_reviews)
data$movie_title %<>% stringr::str_replace("?", replacement="")
Score_Dur <- ggplot(data, aes(x=duration, y=imdb_score,
text=paste("Movie Title: ", test$movie_title, "<br>Duration in Hours and Minutes: ",
duration %>%
minutes() %>%
period_to_seconds() %>%
seconds_to_period() %>%
as.character() %>%
stringr::str_replace(" 0S", replacement = ""),
sep=""))) +
geom_point(size=1, aes(colour=`Number of User Reviews`)) +
scale_colour_gradientn(colours = rev(rainbow(6))) +
theme(plot.title = element_text(face = "bold")) +
labs(title = "Duration Vs. IMDB Score (and Number of User Reviews)",
x = "Duration", y = "IMDB Score")
ggplotly(Score_Dur, hoverinfo="text")
runApp('F:/ADBMS/project/Final files of project')
runApp('F:/ADBMS/project/Final files of project')
library(ggplot2)
library(dplyr)
library(GGally)
library(tree)
library(rpart)
library(plotly)
library(corrplot)
library(corrr)
library(rpart.plot)
library(magrittr)
library(lubridate)
library(ggthemes)
library(reshape2)
library(corrgram)
library(randomForest)
setwd("C:/Program Files/RStudio/bin")
train<-sample_frac(data, 0.7) #train data which has 70% of data
data<- read.csv("movie_metadata.csv")
sid<-as.numeric(rownames(train)) #Because rownames() returns character
test<-data[-sid,] #test data which has 30% of data
columns <- c()
for(k in 1:dim(Sorted_data)[2])
{
print(k)
if(is.numeric(Sorted_data[,k])|| is.integer(Sorted_data[,k]))
{
columns[k]=T
}
else
{
columns[k]=F
}
}
temp <- na.omit(Sorted_data[,columns])
attach(s1)
s1<-within(temp, rm(genres,actor_3_name,imdb_score,actor_1_name,director_name,actor_2_name,color,num_critic_for_reviews,duration,gross,num_voted_users,facenumber_in_poster,plot_keywords,movie_imdb_link,num_user_for_reviews,language,country,content_rating,budget,aspect_ratio))
o<-0
yearlist<-list()
for(i in 1:2000)
k<-1
{
if(identical(s1[i,5],s1[i+1,5]) == FALSE)
{
# unique_years[length(unique_years) + 1] <- s1[i,5]
yearlist[k]<-s1[i,5]
k=k+1
}
}
print(yearlist)
movielist<- list()
m <- 1
for(g in 1:59)
{
#likes <- likes + (year_likes[q,1]) + (year_likes[q,2]) + (year_likes[q,3]) + (year_likes[q,4]) + (year_likes[q,6]) + (year_likes[q,7])
o = s1$director_facebook_likes[g] + s1$actor_3_facebook_likes[g] + s1$actor_1_facebook_likes[g] + s1$cast_total_facebook_likes[g] + s1$actor_2_facebook_likes[g] + s1$movie_facebook_likes[g]
movielist[m] = o
print(movielist[m])
print(s1[g,5])
m=m+1
}
print(movielist)
class(movielist)
plot(x=yearlist,y=movielist, type = "h", xlab = "year" , ylab = "movies")
movielikes <- list()
moviebudget <- list()
for(v in 1 : 500)
runApp('F:/ADBMS/project/Final files of project')
movielikes
print(moviebudget)
for(p in 1 : 500)
{
movielikes[p] <- s1$movie_facebook_likes[p]
}
movielikes
for(f in 1:500)
{
if(is.na(Sorted_data$budget[f]))
{
moviebudget[f] <- 0
}
moviebudget[f] <- Sorted_data$budget[f]
}
print(moviebudget)
plot(x = movielikes, y = moviebudget, type="h", xlab ="movies_facebook_likes",ylab ="Movie_budget")
k<-1
o<-0
yearlist<-list()
for(i in 1:2000)
{
if(identical(s1[i,5],s1[i+1,5]) == FALSE)
{
# unique_years[length(unique_years) + 1] <- s1[i,5]
yearlist[k]<-s1[i,5]
k=k+1
}
}
print(yearlist)
movielist<- list()
m <- 1
for(g in 1:59)
{
#likes <- likes + (year_likes[q,1]) + (year_likes[q,2]) + (year_likes[q,3]) + (year_likes[q,4]) + (year_likes[q,6]) + (year_likes[q,7])
o = s1$director_facebook_likes[g] + s1$actor_3_facebook_likes[g] + s1$actor_1_facebook_likes[g] + s1$cast_total_facebook_likes[g] + s1$actor_2_facebook_likes[g] + s1$movie_facebook_likes[g]
movielist[m] = o
print(movielist[m])
print(s1[g,5])
m=m+1
}
print(movielist)
class(movielist)
plot(x=yearlist,y=movielist, type = "h", xlab = "year" , ylab = "movies")
movielikes <- list()
library(ggplot2)
library(GGally)
library(dplyr)
library(tree)
library(rpart)
library(rpart.plot)
library(plotly)
library(corrplot)
library(corrr)
library(ggthemes)
library(magrittr)
library(lubridate)
library(reshape2)
library(corrgram)
library(randomForest)
################################################################
# DIVIDING DATA INTO TEMP AND TEST RUNTIME
setwd("C:/Program Files/RStudio/bin")
data<- read.csv("movie_metadata.csv")
train<-sample_frac(data, 0.7) #train data which has 70% of data
sid<-as.numeric(rownames(train)) #Because rownames() returns character
test<-data[-sid,] #test data which has 30% of data
################################################
#TO EXTRACT THE NUMERICAL DATA FROM DATASET
columns <- c()
for(k in 1:dim(Sorted_data)[2])
{
print(k)
if(is.numeric(Sorted_data[,k])|| is.integer(Sorted_data[,k]))
{
columns[k]=T
}
else
{
columns[k]=F
}
}
#na.omit returns the object with incomplete cases removed like missing data eliminated columns wise.
#TEMP DATAFRAME HOLDS THE NUMERICAL DATA
temp <- na.omit(Sorted_data[,columns])
s1<-within(temp, rm(genres,actor_3_name,imdb_score,actor_1_name,director_name,actor_2_name,color,num_critic_for_reviews,duration,gross,num_voted_users,facenumber_in_poster,plot_keywords,movie_imdb_link,num_user_for_reviews,language,country,content_rating,budget,aspect_ratio))
attach(s1)
#################################################################
#Calculating top  hit movies
k<-1
o<-0
yearlist<-list()
for(i in 1:2000)
{
if(identical(s1[i,5],s1[i+1,5]) == FALSE)
{
# unique_years[length(unique_years) + 1] <- s1[i,5]
yearlist[k]<-s1[i,5]
k=k+1
}
}
print(yearlist)
movielist<- list()
m <- 1
for(g in 1:59)
{
#likes <- likes + (year_likes[q,1]) + (year_likes[q,2]) + (year_likes[q,3]) + (year_likes[q,4]) + (year_likes[q,6]) + (year_likes[q,7])
o = s1$director_facebook_likes[g] + s1$actor_3_facebook_likes[g] + s1$actor_1_facebook_likes[g] + s1$cast_total_facebook_likes[g] + s1$actor_2_facebook_likes[g] + s1$movie_facebook_likes[g]
movielist[m] = o
print(movielist[m])
print(s1[g,5])
m=m+1
}
print(movielist)
class(movielist)
plot(x=yearlist,y=movielist, type = "h", xlab = "year" , ylab = "movies")
#Num_likes_year_wise <- matrix(Num_likes_per_year,nrow=58,ncol=1)
################################################
#Facebook likes
################################################
movielikes <- list()
moviebudget <- list()
for(v in 1 : 500)
{
movielikes[v] <- Sorted_data$movie_facebook_likes[v]
}
print(movielikes)
for(f in 1:500)
{
if(is.na(Sorted_data$budget[f]))
{
moviebudget[f] <- 0
}
moviebudget[f] <- Sorted_data$budget[f]
}
print(moviebudget)
plot(x = movielikes, y = moviebudget, type="h", xlab ="movies_facebook_likes",ylab ="Movie_budget")
# packages#
help('plot')
library(ggplot2)
library(GGally)
library(dplyr)
library(tree)
library(rpart)
library(rpart.plot)
library(plotly)
library(corrplot)
library(corrr)
library(ggthemes)
library(magrittr)
library(lubridate)
library(reshape2)
library(corrgram)
library(randomForest)
#To install missing packages
#install.packages('randomForest')
########################
# DIVIDING DATA INTO TEMP AND TEST RUNTIME
setwd("C:/Program Files/RStudio/bin")
data<- read.csv("movie_metadata.csv")
train<-sample_frac(data, 0.7) #train data which has 70% of data
sid<-as.numeric(rownames(train)) #Because rownames() returns character
test<-data[-sid,] #test data which has 30% of data
################################################
#The attach() function in R can be used to make objects within dataframes accessible in R with fewer keystrokes
attach(test)
#order is used to sort data by default it is ascending and for desc [-column name,]
Sorted_data<-test[order(title_year),]
class(Sorted_data)
#################################
#rm() to remove columns that are not required
#s1<-within(Sorted_data, rm(genres,actor_3_name,imdb_score,actor_1_name,director_name,actor_2_name,color,num_critic_for_reviews,duration,gross,num_voted_users,facenumber_in_poster,plot_keywords,movie_imdb_link,num_user_for_reviews,language,country,content_rating,budget,aspect_ratio))
###############################
#TO EXTRACT THE NUMERICAL DATA FROM DATASET
columns <- c()
for(k in 1:dim(Sorted_data)[2])
{
print(k)
if(is.numeric(Sorted_data[,k])|| is.integer(Sorted_data[,k]))
{
columns[k]=T
}
else
{
columns[k]=F
}
}
#na.omit returns the object with incomplete cases removed like missing data eliminated columns wise.
#TEMP DATAFRAME HOLDS THE NUMERICAL DATA
temp <- na.omit(Sorted_data[,columns])
##########################################
#LINEAR MODEL
##########################################
# Correlation to find the  x and y value relation or relation of 1 variable with all other
correlation <- c()
for(i in 1:dim(temp)[2])
{
correlation[i] <- cor(temp[,i],temp[,'imdb_score'])
}
print(colnames(temp))
columns_data<-data.frame(colnames(temp))
correlation #prints correlation results
x<-as.vector(columns_data)
y<-as.vector(correlation)
z<-data.frame(x,y)
print(z)
plot(x=x,y=y,type="b",col="red")
####################################################
ggplot(temp, aes(x=num_voted_users, y=imdb_score)) + geom_point(colour="blue") +
stat_smooth(method=lm, se=FALSE, colour="black")+ggtitle(paste('R:',correlation[7]))
#scipen fun helps to display all numbers after decimal point
options(scipen = 999)
lmfit <- lm(imdb_score ~ num_voted_users,data=test)
summary(lmfit)
rSquared <- summary(lmfit)$r.squared
pred <- predict(lmfit,test)
#plot(pred)
set.seed(100)
a<-mean((temp$imdb_score-pred)^2) #MSE
print(a)
#help("predict")
###################################################################
## Regression trees
###################################################################
library(rpart)
#install.packages("rpart")
temp
set.seed(3)
train <- sample(dim(temp)[1],dim(temp)[1]*0.9)
train
temp_train <- temp[train,]
temp_test <- temp[-train,]
m.rpart <- rpart(imdb_score~.,data=temp_train)
m.rpart
rpart.plot(m.rpart,digits = 3)
## Testing this model
#We apply this model to the test data.
p.rpart <- predict(m.rpart,temp_train)
p.rpart_df<-data.frame(p.rpart)
act_imdb<-temp_train$imdb_score
act_imdb
#How do the actual and predicted models differ? We visualize this by the use of histograms.
tree_dataframe <- data.frame(p.rpart,temp_train$imdb_score)
pred_actual<-data.frame(tree_dataframe)
#View(pred_actual)
ggplot(tree_dataframe, aes(x=p.rpart)) + geom_histogram(fill="blue", colour="green")
ggplot(tree_dataframe, aes(x=temp_train.imdb_score)) + geom_histogram(fill="red", colour="orange")
#We see that the distributions of the predictions are in no way close to that of the distributions of the  real values.
#What is the correlation between the predicted and the actual values?
reg_corr<-cor(p.rpart_df,act_imdb)
reg_corr
#This is a good correleation score. But it goes not give a measure of how the predicted values deviate from the
#actual values.
## MSE
#We therefore calculate the mean squared error
reg_mean<-mean((p.rpart_df-act_imdb)^2)
reg_mean
###########################################################
#Calculating top 20 directors
library("ggplot2")
library("RColorBrewer")
library("data.table")
library("corrgram")
#install.packages("data.table")
color_scheme = brewer.pal(7, "Accent")
help("brewer.pal")
# Subset the directors from entire dataset
director = test['director_name']
# Count how many times each director is in the dataset
director = data.frame(table(director))
# Sort the dataset by the frequency each director appears
director = director[order(director$Freq,decreasing=TRUE),]
# Remove the row without a director name
director = director[-c(1),]
# Plot the top 20 directors with the most movies
ggplot(director[1:20,], aes(x=reorder(factor(director), Freq), y=Freq, alpha=Freq)) +
geom_bar(stat = "identity", fill=color_scheme[7]) +
xlab("Director") +
ylab("Number of Movies") +
ggtitle("Top 20 Directors with the most movies") +
coord_flip() # to flip vertical to horizontal
shiny::runApp('F:/ADBMS/project/Final files of project')
library(dplyr)
library(magrittr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(plotly)
library(shiny)
library(DT)
library(reshape2)
library(splitstackshape)
library(stringr)
library(corrplot)
library(corrr)
library(ggthemes)
#################################################################
setwd("C:/Program Files/RStudio/bin")
data<- read.csv("movie_metadata.csv")
#DURATION VS IMDB SCORE (NUMBER OF USER REVIEWS)
data$`Number of User Reviews` <- data$num_user_for_reviews
data <- select(data, -num_user_for_reviews)
data$movie_title %<>% stringr::str_replace("?", replacement="")
Score_Dur <- ggplot(data, aes(x=duration, y=imdb_score,
text=paste("Movie Title: ", test$movie_title, "<br>Duration in Hours and Minutes: ",
duration %>%
minutes() %>%
period_to_seconds() %>%
seconds_to_period() %>%
as.character() %>%
stringr::str_replace(" 0S", replacement = ""),
sep=""))) +
geom_point(size=1, aes(colour=`Number of User Reviews`)) +
scale_colour_gradientn(colours = rev(rainbow(6))) +
theme(plot.title = element_text(face = "bold")) +
labs(title = "Duration Vs. IMDB Score (and Number of User Reviews)",
x = "Duration", y = "IMDB Score")
ggplotly(Score_Dur, hoverinfo="text")
runApp('F:/ADBMS/project/Final files of project')
runApp('F:/ADBMS/project/Final files of project')
library(ggplot2)
library(GGally)
library(dplyr)
library(tree)
library(rpart)
library(rpart.plot)
library(plotly)
library(corrplot)
library(corrr)
library(ggthemes)
library(magrittr)
library(lubridate)
library(reshape2)
library(corrgram)
library(randomForest)
################################################################
# DIVIDING DATA INTO TEMP AND TEST RUNTIME
setwd("C:/Program Files/RStudio/bin")
data<- read.csv("movie_metadata.csv")
train<-sample_frac(data, 0.7) #train data which has 70% of data
sid<-as.numeric(rownames(train)) #Because rownames() returns character
test<-data[-sid,] #test data which has 30% of data
################################################
#TO EXTRACT THE NUMERICAL DATA FROM DATASET
columns <- c()
for(k in 1:dim(Sorted_data)[2])
{
print(k)
if(is.numeric(Sorted_data[,k])|| is.integer(Sorted_data[,k]))
{
columns[k]=T
}
else
{
columns[k]=F
}
}
#na.omit returns the object with incomplete cases removed like missing data eliminated columns wise.
#TEMP DATAFRAME HOLDS THE NUMERICAL DATA
temp <- na.omit(Sorted_data[,columns])
s1<-within(temp, rm(genres,actor_3_name,imdb_score,actor_1_name,director_name,actor_2_name,color,num_critic_for_reviews,duration,gross,num_voted_users,facenumber_in_poster,plot_keywords,movie_imdb_link,num_user_for_reviews,language,country,content_rating,budget,aspect_ratio))
attach(s1)
movielikes <- list()
moviebudget <- list()
for(p in 1 : 500)
{
movielikes[p] <- s1$movie_facebook_likes[p]
}
movielikes
for(f in 1:500)
{
if(is.na(Sorted_data$budget[f]))
{
moviebudget[f] <- 0
}
moviebudget[f] <- Sorted_data$budget[f]
}
print(moviebudget)
plot(x = movielikes, y = moviebudget, type="h", xlab ="movies_facebook_likes",ylab ="Movie_budget")
runApp('F:/ADBMS/project/Final files of project')
